plugins {
  id 'java'
  id 'jacoco'
  id 'com.diffplug.spotless' version '8.0.0'
}

java {
  toolchain {
    languageVersion = JavaLanguageVersion.of(25)
  }
}

repositories {
  mavenLocal()
  mavenCentral()
}

configurations {
  umlDoclet
}

dependencies {
  testImplementation 'org.junit.jupiter:junit-jupiter:6.0.0'
  testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
  umlDoclet 'nl.talsmasoftware:umldoclet:2.2.3'
}

tasks.withType(JavaCompile).configureEach {
  options.encoding = 'UTF-8'
  options.compilerArgs += ['-Xlint:all', '-Werror']
}

tasks.withType(JavaExec).configureEach {
  jvmArgs += ['-Duser.language=ROOT', '-Dfile.encoding=UTF-8']
  defaultCharacterEncoding = 'UTF-8'
  classpath += sourceSets.scratch.runtimeClasspath
  enableAssertions = !providers.gradleProperty('disableAssertions').isPresent()
}

tasks.withType(Test).configureEach {
  jvmArgs += ['-Duser.language=ROOT', '-Dfile.encoding=UTF-8']
  defaultCharacterEncoding = 'UTF-8'
}

tasks.named('test') {
  useJUnitPlatform()
  testLogging {
    events 'skipped', 'failed'
    afterSuite { desc, result ->
      if (!desc.parent) {
        println "Results: ${result.resultType} (${result.testCount} tests, ${result.successfulTestCount} successes, ${result.failedTestCount} failures, ${result.skippedTestCount} skipped)"
      }
    }
  }
  finalizedBy jacocoTestReport
}

javadoc {
  options {
    description = 'Generates Javadoc API documentation and UML diagrams for the main source code.'
    encoding = 'UTF-8'
    charSet = 'UTF-8'
    links = [ 'https://docs.oracle.com/en/java/javase/25/docs/api/' ]
    docTitle = 'Prog2@UniMIW - Temi Svolti'
    overview = 'src/overview.html'
    header = '<script type=\'text/javascript\' src=\'https://cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML\'></script>'
    docletpath = configurations.umlDoclet.files.asType(List)
    doclet = 'nl.talsmasoftware.umldoclet.UMLDoclet'
    showFromPrivate()
    addBooleanOption('Xdoclint:all', true)
    addBooleanOption('Werror', true)
    addBooleanOption('-allow-script-in-comments', true)
  }
}

spotless {
  enforceCheck = false
  java {
    googleJavaFormat('1.28.0')
    removeUnusedImports()
    leadingTabsToSpaces(2)
    endWithNewline()
    licenseHeaderFile('src/licenseHeaderFile.txt')
  }
}
